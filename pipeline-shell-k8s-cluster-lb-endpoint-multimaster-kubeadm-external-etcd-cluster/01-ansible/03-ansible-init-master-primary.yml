- name: Generate kubeadm control plane cluster config
  hosts: etcd_primary
  become: true
  tasks:
    - name: Retrieve etcd client certificates from etcd primary node
      fetch:
        src: "/etc/kubernetes/pki/{{item}}"
        dest: "{{playbook_dir}}/tmp/"
        flat: yes
      with_items:
        - apiserver-etcd-client.crt
        - apiserver-etcd-client.key

- name: Control-plane primary master node initialization
  hosts: masters_primary
  become: true
  vars:
    load_balancer_dns: "{{ lookup('file', 'tmp/k8s_lb_dns_name') }}"
    load_balancer_port: "6443"
  tasks:
    - name: Transfer etcd client certificates to master primary node (step 1)
      copy:
        src: "{{playbook_dir}}/tmp/{{item}}"
        dest: "/etc/kubernetes/pki/"
        mode: 0644
      with_items:
        - apiserver-etcd-client.crt
        - apiserver-etcd-client.key

    - name: Transfer etcd CA certificate to master primary node (step 2)
      copy:
        src: "{{playbook_dir}}/tmp/ca.crt"
        dest: "/etc/kubernetes/pki/etcd/"
        mode: 0644

    - name: Transfer external etcd cluster configuration file to master primary node
      template:
        src: "kubeadm-config.j2"
        dest: "/etc/kubernetes/kubeadm-config.yml"
        mode: 0644

    - name: Kubeadm init
      shell: kubeadm init --config /etc/kubernetes/kubeadm-config.yml --upload-certs
      register: initResult
      ignore_errors: yes

    - name: "Wait for cluster initialization."
      wait_for:
        timeout: 10

    - name: Store Kubeadm init stdout
      action: copy content="{{ initResult.stdout }}" dest="/etc/kubernetes/kubeadm-init.stdout"
    
    - name: Store Kubeadm init stderr
      action: copy content="{{ initResult.stderr }}" dest="/etc/kubernetes/kubeadm-init.stderr"

    - name: Create .kube folder
      file:
        path: "~{{ ansible_ssh_user }}/.kube"
        state: directory
        owner: "{{ ansible_ssh_user }}"

    - name: Copy admin.conf to .kube folder
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "~{{ ansible_ssh_user }}/.kube/config"
        owner: "{{ ansible_ssh_user }}"
        remote_src: yes

    - name: Create .kube folder
      file:
        path: "/root/.kube"
        state: directory
        owner: "root"

    - name: Copy admin.conf to .kube folder
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/root/.kube/config"
        owner: "root"
        remote_src: yes

